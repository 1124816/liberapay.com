# coding: utf8
from __future__ import division, print_function, unicode_literals

[--------------------------------------------------------]

title = _("Stats")
db = website.db
escrow = db.one("SELECT sum(balance) FROM participants", default=0)
nach = db.one("""
    SELECT count(*)
      FROM current_exchange_routes r
      JOIN participants p ON p.id = r.participant
     WHERE r.network = 'mango-ba'
       AND r.error = ''
       AND p.is_suspicious IS NOT true
""")
npeople = db.one("SELECT count(*) FROM participants WHERE status = 'active' AND is_suspicious IS NOT true")
ncc = db.one("""
    SELECT count(*)
      FROM current_exchange_routes r
      JOIN participants p ON p.id = r.participant
     WHERE r.network = 'mango-cc'
       AND r.error = ''
       AND p.is_suspicious IS NOT true
""")
pcc = ((ncc * 100.0) / npeople) if npeople > 0 else 0.0
transfer_volume = db.one("SELECT transfer_volume FROM paydays ORDER BY ts_end DESC LIMIT 1", default=0)
tips_stats = db.one("""
    SELECT count(*), avg(amount), sum(amount)
      FROM current_tips
      JOIN participants p ON p.id = tipper
      JOIN participants p2 ON p2.id = tippee
     WHERE amount > 0
       AND is_funded
       AND p.status = 'active'
       AND p2.status = 'active'
       AND p.is_suspicious IS NOT true
       AND p2.is_suspicious IS NOT true
""")
tip_n = getattr(tips_stats, 'count', None) or 0
average_tip = getattr(tips_stats, 'avg', None) or 0
total_backed_tips = getattr(tips_stats, 'sum', None) or 0

average_tippees = int(db.one("""\
    SELECT round(avg(ntippees))
      FROM ( SELECT count(tippee) as NTIPPEES
               FROM current_tips
               JOIN participants p ON p.id = tipper
               JOIN participants p2 on p2.id = tippee
              WHERE amount > 0
                AND is_funded
                AND p.status = 'active'
                AND p2.status = 'active'
                AND p.is_suspicious IS NOT true
                AND p2.is_suspicious IS NOT true
           GROUP BY tipper
           ) AS bar
""", default=0))

TIP_DISTRIBUTION = """
    SELECT amount, count(amount)
      FROM current_tips
      JOIN participants p ON p.id = tipper
      JOIN participants p2 on p2.id = tippee
     WHERE amount > 0
       AND is_funded
       AND p.status = 'active'
       AND p2.status = 'active'
       AND p.is_suspicious IS NOT true
       AND p2.is_suspicious IS NOT true
  GROUP BY amount
  ORDER BY amount
"""

def get_tip_distribution():
    tip_distribution = db.all(TIP_DISTRIBUTION)
    r = {}
    for row in tip_distribution:
        percentage = row.count * 1.0 / tip_n
        r[str(row.amount)] = (row.count, percentage)
    return r


last_payday = db.one("select * from paydays order by ts_end desc limit 1", back_as="dict")
if last_payday:
    nactive = last_payday['nactive']
    ngivers = last_payday['ntippers']
    nreceivers = last_payday['ntippees']
    noverlap = ngivers + nreceivers - nactive
else:
    nactive = ngivers = nreceivers = noverlap = 0


def out():
    names = ['ncc', 'pcc', 'transfer_volume', 'average_tip', 'average_tippees',
             'total_backed_tips', 'tip_n', 'nach', 'escrow',
             'ngivers', 'nreceivers', 'noverlap', 'nactive']
    d = globals()
    r = {name: d[name] for name in names}
    r['tip_distribution'] = get_tip_distribution()
    return r

[----------------------------------------------------------] text/html

{% extends "templates/about.html" %}

{% block scripts %}
<script>
    jQuery.get('/about/charts.json', Liberapay.charts.make);
</script>
{{ super() }}
{% endblock %}

{% block content %}

    <p>{{ _("Liberapay is {0} old and has {1} active users.", to_age(constants.BIRTHDAY), nactive) }}</p>

    <p>
        {{ _("{0} participants gave money in the past week.", ngivers) }}<br />
        {{ _("{0} received money.", nreceivers) }}<br />
        {{ _("{0} did both.", noverlap) }}
    </p>

    <p>{{ _("{0} people have joined Liberapay. Of those, {1}% ({2}) have a working credit card on file.",
            npeople, pcc, ncc) }}</p>

    <p>{{ _("{0} is escrowed within Liberapay. {1} people have connected a bank account for withdrawals.",
            Money(escrow, 'EUR'), nach) }}</p>

    {% if last_payday %}
    <p>{{ _("{0} changed hands {1}.", Money(transfer_volume, 'EUR'),
            to_age(last_payday.ts_start)) }}</p>
    {% endif %}

    <p>{{ ngettext("On average, people who give, give {0} each to one other user",
                   "On average, people who give, give {0} each to {n} other users",
                   average_tippees, Money(average_tip, 'EUR')) }}</p>

    <div class="two-column">
        <div class="chart-wrapper">
            <a name="users"></a>
            <h2>{{ _("Total Users") }}</h2>
            <p class="note">{{ _("Anyone who's ever created an account on Liberapay") }}</p>
            <div class="chart" data-chart="total_users"></div>
            <div class="x-axis">{{ _("weeks") }}</div>
        </div>

        <div class="chart-wrapper">
            <a name="active"></a>
            <h2>{{ _("Active Users") }}</h2>
            <p class="note">{{ _("Users that gave and/or received money within Liberapay (per week)") }}</p>
            <div class="chart" data-chart="active_users"></div>
            <div class="x-axis">{{ _("weeks") }}</div>
        </div>

        <div class="chart-wrapper">
            <a name="cumulative-gifts"></a>
            <h2>{{ _("Total Gifts (€)") }}</h2>
            <p class="note">{{ _("Money transferred within Liberapay (cumulative)") }}</p>
            <div class="chart" data-chart="total_gifts"></div>
            <div class="x-axis">{{ _("weeks") }}</div>
        </div>

        <div class="chart-wrapper">
            <a name="gifts"></a>
            <h2>{{ _("Weekly Gifts (€)") }}</h2>
            <p class="note">{{ _("Money transferred within Liberapay (per week)") }}</p>
            <div class="chart" data-chart="weekly_gifts"></div>
            <div class="x-axis">{{ _("weeks") }}</div>
        </div>

        <div class="chart-wrapper newline">
            <a name="charges"></a>
            <h2>{{ _("Charges (€)") }}</h2>
            <p class="note">{{ _("Money moved into Liberapay via credit card") }}</p>
            <div class="chart" data-chart="charges"></div>
            <div class="x-axis">{{ _("weeks") }}</div>
        </div>

        <div class="chart-wrapper">
            <a name="withdrawals"></a>
            <h2>{{ _("Withdrawals (€)") }}</h2>
            <p class="note">{{ _("Money withdrawn from Liberapay to a bank account") }}</p>
            <div class="chart" data-chart="withdrawals"></div>
            <div class="x-axis">{{ _("weeks") }}</div>
        </div>
    </div>

{% endblock %}

[----------------------------------------------------------] application/json via json_dump
out()

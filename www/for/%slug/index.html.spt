from aspen import Response
from aspen.utils import utcnow
from liberapay.models.community import name_pattern, slugize, Community
from liberapay.utils.query_cache import QueryCache

query_cache = QueryCache(website.db, threshold=1)

[---]

_slug = request.path['slug']
if name_pattern.match(_slug) is None:
    raise Response(404)
slug = slugize(_slug)
if slug != _slug:
    request.redirect('../' + slug + '/')

try:
    limit = min(int(request.qs.get('limit', 12)), 100)
    offset = int(request.qs.get('offset', 0))
except ValueError:
    raise Response(400)

community = Community.from_slug(slug)

if community is None:
    class StubCommunity:
        slug = _slug
        name = _slug
        nmembers = 0
        check_membership = lambda a, b: False
        ctime = utcnow()

    community = StubCommunity()

# Set the page title based on the communities name.
title = community.name


# Run queries for listings.
# =========================

new_participants = query_cache.all("""
-- new participants on community page

    SELECT username
         , id
         , join_time
         , avatar_url
      FROM participants p
      JOIN community_members cc ON cc.participant = p.id AND cc.slug = %s
     WHERE p.is_suspicious IS NOT true
       AND cc.is_member
  ORDER BY cc.ctime DESC
     LIMIT %s
    OFFSET %s

""", (community.slug, limit, offset))

givers = query_cache.all("""
-- top givers on community page

    SELECT username
         , id
         , hide_giving AS anonymous
         , giving AS amount
         , avatar_url
      FROM participants p
      JOIN community_members cc ON cc.participant = p.id AND cc.slug = %s
     WHERE is_suspicious IS NOT true
       AND giving > 0
       AND cc.is_member
  ORDER BY giving DESC
  LIMIT %s
  OFFSET %s

""", (community.slug, limit, offset))

receivers = query_cache.all("""
-- top receivers on community page

    SELECT username
         , id
         , hide_receiving AS anonymous
         , receiving AS amount
         , avatar_url
      FROM participants p
      JOIN community_members cc ON cc.participant = p.id AND cc.slug = %s
     WHERE is_suspicious IS NOT true
       AND receiving > 0
       AND cc.is_member
  ORDER BY receiving DESC
  LIMIT %s
  OFFSET %s

""", (community.slug, limit, offset))

[---]
{% from 'templates/avatar-url.html' import avatar_img, avatar_default with context %}

{% extends "templates/base.html" %}

{% block content %}

{% if community.nmembers == 0 %}
    <p>{{ _("You're the first one here!") }}</p>
    <p>{{ _("Bring the {0} community to Liberapay to find like-minded people to give to.",
            community.name) }}</p>
{% else %}
<p>{{ ngettext("This community was created {0} ago and has {n} member.",
               "This community was created {0} ago and has {n} members.",
               community.nmembers,
               to_age_str(community.ctime, add_direction=False)) }}</p>
{% endif %}

{% if user.ANON %}
    <div class="sign-in-to">
        {% include "templates/sign-in.html" %}
        {{ _("to join the {0} community on Liberapay.", community.name) }}
    </div>
{% else %}
    <form action="/{{ user.username }}/communities.json" method="POST">
        <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />
        {% set is_member = community.check_membership(user) %}
        <button class="btn btn-{{ 'danger' if is_member else 'primary' }}" name="do"
                value="{{ 'leave' if is_member else 'join' }}:{{ community.name }}">
            {{ _("Leave") if is_member else _("Join") }}
        </button>
    </form>
{% endif %}

{% if community.nmembers %}
<div class="row">

<div class="col-md-4">
    <h2>{{ _("New Members") }}</h2>
    <ul class="people">
        {% for participant in new_participants %}
        <li class="panel panel-default mini-user">
            <a href="/{{ participant.username }}/" class="mini-user">
                {{ avatar_img(participant) }}
                <div class="name">{{ participant.username }}</div>
                <div class="age">{{ to_age_str(participant.join_time, add_direction=True) }}</div>
            </a>
        </li>
        {% endfor %}
    </ul>
</div>

<div class="col-md-4">
    <h2>{{ _("Top Givers") }}</h2>
    <ul class="people">
        {% for giver in givers %}
        <li class="panel panel-default mini-user">
            {% if giver.anonymous and not user.is_admin %}
                {{ avatar_default() }}
                <div class="name">{{ _("Anonymous") }}</div>
                <div class="money">{{ format_currency(giver.amount, 'USD', trailing_zeroes=False) }}</div>
            {% else %}
            <a href="/{{ giver.username }}/" class="mini-user{{ ' anonymous' if giver.anonymous }}">
                {{ avatar_img(giver) }}
                <div class="name">{{ giver.username }}</div>
                <div class="money">{{ format_currency(giver.amount, 'USD', trailing_zeroes=False) }}</div>
            </a>
            {% endif %}
        </li>
        {% endfor %}
    </ul>
</div>

<div class="col-md-4">
    <h2>{{ _("Top Receivers") }}</h2>
    <ul class="people">
        {% for receiver in receivers %}
        <li class="panel panel-default mini-user">
            {% if receiver.anonymous and not user.is_admin %}
                {{ avatar_default() }}
                <div class="name">{{ _("Anonymous") }}</div>
                <div class="money">{{ format_currency(receiver.amount, 'USD', trailing_zeroes=False) }}</div>
            {% else %}
            <a href="/{{ receiver.username }}/" class="mini-user{{ ' anonymous' if receiver.anonymous }}">
                {{ avatar_img(receiver) }}
                <div class="name">{{ receiver.username }}</div>
                <div class="money">{{ format_currency(receiver.amount, 'USD', trailing_zeroes=False) }}</div>
            </a>
            {% endif %}
        </li>
        {% endfor %}
    </ul>
</div>

</div>
{% endif %}
{% endblock %}

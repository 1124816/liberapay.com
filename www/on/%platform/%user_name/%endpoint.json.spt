from base64 import b64decode, b64encode

from six.moves.urllib.parse import quote, urlencode

from liberapay.models.account_elsewhere import get_account_elsewhere

whitelisted_endpoints = ['public', 'charts']


def stringify_qs(qs, prefix='?'):
    # XXX Upstream to Aspen
    tupled = []
    for k, vals in qs.items():
        for v in vals:
            tupled.append((k, v))
    return prefix + urlencode(tupled) if tupled else ""


[-----------------------------------------------------------------------------]

endpoint = request.path['endpoint']
if not endpoint in whitelisted_endpoints:
    raise response.error(404)

platform, account = get_account_elsewhere(website, state)

if account.participant.status != 'stub':
    next_url = '/%s/%s.json' % (quote(account.participant.username), endpoint)
    next_url += stringify_qs(request.qs)
    response.headers[b"Access-Control-Allow-Origin"] = b"*"
    raise response.redirect(next_url)


participant = account.participant

out = { "on": request.path['platform']
      , "avatar": participant.avatar_url
      , "npatrons": participant.npatrons
       }



# Generate my_tip key
# ===================
# Display values:
#
#   undefined - user is not authenticated
#   "self" - user == participant
#   null - user has never tipped this person
#   0.00 - user used to tip this person but now doesn't
#   3.00 - user tips this person this amount

if not user.ANON:
    if user == participant:
        my_tip = "self"
    else:
        my_tip = user.get_tip_to(participant)['amount']
    out["my_tip"] = str(my_tip)


response.headers[b"Access-Control-Allow-Origin"] = b"*"

[---] application/json via jsonp_dump
out

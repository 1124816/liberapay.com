from datetime import datetime

from mangopay.resources import LegalUser, NaturalUser
from mangopay.utils import Address

from liberapay.billing.exchanges import repr_exception, APIError
from liberapay.utils import get_participant

EPOCH = datetime(1970, 1, 1)
KEYS_NATURAL = 'FirstName LastName CountryOfResidence Nationality Birthday'.split()
KEYS_LEGAL = ['Name', 'LegalPersonType'] + ['LegalRepresentative'+k for k in KEYS_NATURAL]

[---]
request.allow('GET', 'POST')
participant = get_participant(state, restrict=True)

if participant.kind not in ('individual', 'organization'):
    raise response.error(403)

title = participant.username
error, success = '', ''

if request.method == 'POST':
    body = request.body

    if participant.kind == 'individual':
        account = participant.get_mangopay_account() or NaturalUser()
        p = ''
        keys = KEYS_NATURAL
    else:
        account = participant.get_mangopay_account() or LegalUser()
        p = 'LegalRepresentative'
        keys = KEYS_LEGAL

    if not account.Tag:
        account.Tag = website.canonical_url + '/~%i/' % participant.id

    account.Email = participant.email or participant.get_any_email()

    dob = body.get(p+'Birthday', '')
    if dob:
        try:
            year, month, day = map(int, dob.split('-'))
            # the above raises ValueError if the number of parts isn't 3
            # or if any part isn't an integer
            dt = datetime(year, month, day)
            body[p+'Birthday'] = int((dt - EPOCH).total_seconds())
        except ValueError:
            error = _("Invalid date of birth.")

    for k in keys:
        v = body.get(k)
        if v or v == 0:
            setattr(account, k, v)
        else:
            error = _("You haven't filled all the required fields.")
            break

    if not error:
        try:
            if account.Id:
                for k, v in list(account.get_field_dict().items()):
                    if isinstance(v, Address) and not getattr(v, 'country', None):
                        setattr(account, k, None)
                account.save()
                success = _("Your identity information has been updated.")
            elif body.get('terms') == 'agree':
                account.save()
                id = website.db.one("""
                    UPDATE participants
                       SET mangopay_user_id = %s
                     WHERE id = %s
                       AND mangopay_user_id IS NULL
                 RETURNING mangopay_user_id
                """, (account.Id, participant.id))
                if id != account.Id:
                    raise response.error(409, "race condition")
                participant.mark_notifications_as_read('identity_required')
                success = _("Your identity information has been registered.")
            else:
                error = _("You have to agree to MangoPay's Terms of Service.")
        except APIError as err:
            error = repr_exception(err)
            website.tell_sentry(err, state)

    if error and request.headers.get(b'X-Requested-With') == b'XMLHttpRequest':
        raise response.error(400, error)

else:
    account = participant.get_mangopay_account()

[---] application/json
{"msg": success}

[---] text/html
% extends "templates/settings.html"

% block content
<div class="paragraph">
<form action="" method="POST" class="js-submit">

    % if error
    <div class="alert alert-danger">{{ error }}</div>
    % elif success
    <div class="alert alert-success">{{ success }}</div>
    % endif

    <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />

    % include "templates/identity-form.html"

    <button class="btn btn-primary" type="submit">{{ _("Save") }}</button>

</form>
</div>
% endblock

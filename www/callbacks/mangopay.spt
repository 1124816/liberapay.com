"""An endpoint to receive Mangopay's callbacks.

Doc: https://docs.mangopay.com/api-references/notifications/
"""

from aspen import Response

from liberapay.billing import mangoapi
from liberapay.billing.exchanges import record_exchange_result, repr_error
from liberapay.models.participant import Participant

EVENT_TYPES = {
    'PAYIN_NORMAL': mangoapi.payIns,
    'PAYOUT_NORMAL': mangoapi.payOuts,
}

[---]

try:
    event, status = request.qs['EventType'].rsplit('_', 1)
except ValueError:
    raise Response(400, "bad EventType")
RessourceId = request.qs['RessourceId']

cls = EVENT_TYPES.get(event)

if cls:
    # Check stuff
    payio = cls.Get(RessourceId)
    if payio.Status != status:
        raise Response(400, "status mismatch")
    status = status.lower()
    e_id = payio.Tag
    e_status = website.db.one("SELECT status FROM exchanges WHERE id = %s", (e_id,))
    if e_status == status:
        raise Response(200, "already done")

    # Update the DB
    error = repr_error(payio)
    p = Participant._from_thing("mangopay_user_id", payio.AuthorId)
    if p.status == 'closed':
        affects_balance = (
            event == 'PAYOUT_NORMAL' and status == 'failed' or
            event == 'PAYIN_NORMAL' and status == 'succeeded'
        )
        if affects_balance:
            p.update_status('active')
    record_exchange_result(website.db, e_id, status, error, p)

    # Notify the user
    e = website.db.one("SELECT * FROM exchanges WHERE id = %s", (e_id,))
    if event == 'PAYIN_NORMAL' and payio.PaymentType == 'BANK_WIRE':
        p.notify('payin_bankwire_'+status, exchange=e._asdict())
    elif event == 'PAYOUT_NORMAL' and status != 'succeeded':
        p.notify('withdrawal_'+status, exchange=e._asdict())

else:
    raise Response(400, "unknown event type")

[---] text/plain

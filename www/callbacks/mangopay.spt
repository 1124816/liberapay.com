# coding: utf8
"""An endpoint to receive Mangopay's callbacks.

Doc: https://docs.mangopay.com/api-references/notifications/
"""

from datetime import timedelta
from decimal import Decimal as D

import mangopay.resources

from liberapay.billing.exchanges import (
    record_exchange_result, record_payout_refund, repr_error, skim_bank_wire,
)
from liberapay.models.participant import Participant
from liberapay.utils import utcnow

EVENT_TYPES = {
    'PAYIN_NORMAL': mangopay.resources.PayIn,
    'PAYOUT_NORMAL': mangopay.resources.BankWirePayOut,
    'PAYOUT_REFUND': mangopay.resources.Refund,
}

NOTIFICATION_TIMEOUT = timedelta(days=35)

[---]

try:
    event, status = request.qs['EventType'].rsplit('_', 1)
except ValueError:
    raise response.error(400, "bad EventType")
RessourceId = request.qs['RessourceId']
try:
    int(RessourceId)
except ValueError:
    raise response.error(400, "bad RessourceId: not an integer")

cls = EVENT_TYPES.get(event)

if cls:
    # Check stuff
    try:
        payio = cls.get(RessourceId)
    except cls.DoesNotExist:
        raise response.error(400, "bad RessourceId: DoesNotExist")
    if payio.Status != status:
        raise response.error(400, "status mismatch")
    status = status.lower()
    e_id = payio.Tag
    if event == 'PAYOUT_REFUND':
        # Payout refunds are created by MangoPay and have no Tag
        e_id = record_payout_refund(website.db, payio)
    e_status = website.db.one("SELECT status FROM exchanges WHERE id = %s", (e_id,))
    if e_status == status:
        raise response.success(200, "already done")
    if event == 'PAYIN_NORMAL' and payio.PaymentType == 'BANK_WIRE':
        if status == 'succeeded':
            expected = payio.DeclaredDebitedFunds.Amount - payio.DeclaredFees.Amount
            assert payio.CreditedFunds.Currency == 'EUR'
        else:
            expected = 0
        credited_amount = payio.CreditedFunds.Amount
        if credited_amount != expected:
            # The user didn't send the expected amount of money
            credited_amount = D(credited_amount) / D(100)
            paid_fees = D(payio.Fees.Amount) / D(100)
            debited_amount = D(payio.DebitedFunds.Amount) / D(100)
            standard_fee, new_vat = skim_bank_wire(debited_amount)[1:]
            if abs(paid_fees - standard_fee) > D('0.01'):
                # MangoPay didn't properly adapt the fee to the received amount
                try:
                    raise Exception('fee mismatch in bankwire payin')
                except Exception as e:
                    website.tell_sentry(e, state, allow_reraise=False)
            note = (
                'amount mismatch: expected %sc€ (fee %sc€)' %
                (payio.DeclaredDebitedFunds.Amount, payio.DeclaredFees.Amount)
            )
            website.db.run("""
                UPDATE exchanges
                   SET amount = %s
                     , fee = %s
                     , vat = %s
                     , note = %s
                 WHERE id = %s
            """, (credited_amount, paid_fees, new_vat, note, e_id))

    if payio.AuthorId == website.app_conf.mangopay_client_id:
        if event == 'PAYOUT_NORMAL' and status == 'succeeded':
            # This is the monthly fee profit payout, ignore it
            raise response.success(200, '{}')

    # Update the DB
    error = repr_error(payio)
    if event == 'PAYOUT_REFUND':
        error = payio.RefundReason.message
    p = Participant._from_thing("mangopay_user_id", payio.AuthorId)
    was_closed = p.status == 'closed'
    affects_balance = (
        event == 'PAYOUT_NORMAL' and status == 'failed' or
        event in ('PAYIN_NORMAL', 'PAYOUT_REFUND') and status == 'succeeded'
    )
    reopen = was_closed and affects_balance
    if reopen:
        p.update_status('active')
    assert e_id
    record_exchange_result(website.db, e_id, status, error, p)

    # Notify the user
    e = website.db.one("SELECT * FROM exchanges WHERE id = %s", (e_id,))
    if event == 'PAYIN_NORMAL' and payio.PaymentType == 'BANK_WIRE':
        if e.timestamp > (utcnow() - NOTIFICATION_TIMEOUT):
            p.notify('payin_bankwire_'+status, exchange=e._asdict(), force_email=reopen)
    elif event == 'PAYOUT_NORMAL' and status != 'succeeded':
        p.notify('withdrawal_'+status, exchange=e._asdict(), force_email=reopen)
    elif event == 'PAYOUT_REFUND' and status == 'succeeded':
        d = website.db.one("SELECT * FROM exchanges WHERE id = %s", (e.refund_ref,))._asdict()
        d['note'] = e.note
        p.notify('withdrawal_failed', exchange=d, force_email=reopen)

else:
    raise response.error(400, "unknown event type")

[---] text/plain

[---] application/json
{}
